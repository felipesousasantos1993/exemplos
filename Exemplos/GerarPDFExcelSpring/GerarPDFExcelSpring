# Controller Java
@RequestMapping(value = "/fip-susep-exportar", method = RequestMethod.POST)
	public ResponseEntity<?> getPDFFipSusep(@QueryParam("tipo") String tipo, @QueryParam("mes") String mes, @QueryParam("ano") String ano,
			@QueryParam("quadro") String quadro, HttpServletResponse response, @RequestBody RequestDTO body) {
		QuadrosFipsusepEnum quadroEnum = QuadrosFipsusepEnum.getPorCodigo(quadro);
		List<QuadroFipsusepDTO> listaQuadro = QuadrosFipSusepHelper.montarQuadroRelatorio(body.getResultado(), quadroEnum);

		Map<String, Object> params = new HashMap<>();
		params.put(Constantes.RELATORIOS_PARAM.PARAM_MES, mes);
		params.put(Constantes.RELATORIOS_PARAM.PARAM_ANO, ano);

		try {
			gerarRelatorioHelper.gerarRelatorio(listaQuadro, quadroEnum.getPathRelatorio(), params, TipoRelEnum.getPorDescricao(tipo), response);
			return new ResponseEntity<>(HttpStatus.OK);
		} catch (Exception e) {
			return new ResponseEntity<MensagemDTO>(new MensagemDTO(500, e.getMessage()), HttpStatus.INTERNAL_SERVER_ERROR);
		}
	}
  
  # Helper Relat√≥rio Java
  
  public <T> void gerarRelatorio(List<T> lista, String reportUrl, Map<String, Object> params, TipoRelEnum tipoRel, HttpServletResponse response)
			throws Exception {

		try {

			InputStream jasperStream = context.getResource(reportUrl).getInputStream();
			InputStream image = context.getResource(Constantes.RELATORIOS.LOGO_BRASILCAP).getInputStream();

			params.put(Constantes.RELATORIOS_PARAM.PARAM_IMAGE, image);
			JasperReport jasperReport = (JasperReport) JRLoader.loadObject(jasperStream);
			JasperPrint jasperPrint = JasperFillManager.fillReport(jasperReport, params, new JRBeanCollectionDataSource(lista));

			response.setContentType(tipoRel.getContentType());
			response.setHeader("Content-disposition", "inline; filename=report" + tipoRel.getExtensao());

			final OutputStream outStream = response.getOutputStream();
			if (tipoRel.isPDF()) {
				JasperExportManager.exportReportToPdfStream(jasperPrint, outStream);
			} else if (tipoRel.isXLS()) {
				JRXlsExporter exporter = getCommonXlsExporter();

				exporter.setExporterInput(new SimpleExporterInput(jasperPrint));
				exporter.setExporterOutput(new SimpleOutputStreamExporterOutput(outStream));
				exporter.exportReport();

			}
			response.getOutputStream().flush();
			response.getOutputStream().close();

		} catch (Exception e) {
			LOG.error(Constantes.ERRO_MSG.ERRO_EXPORTA_FIPSUSEP, e);
			throw new Exception(Constantes.ERRO_MSG.ERRO_EXPORTA_FIPSUSEP, e);
		}
	}
  
  private static JRXlsExporter getCommonXlsExporter() {
		JRXlsExporter exporter = new JRXlsExporter();
		SimpleXlsReportConfiguration configuration = new SimpleXlsReportConfiguration();
		configuration.setIgnorePageMargins(true);
		configuration.setOnePagePerSheet(false);
		configuration.setWhitePageBackground(false);
		configuration.setRemoveEmptySpaceBetweenRows(true);
		configuration.setDetectCellType(true);

		exporter.setConfiguration(configuration);

		return exporter;
	}
  
  # Service Angular 2/4
  baixarQuadroFipSusep(objExport, tipo, mes, ano, quadro) {
        var url = environment.baseExportarFipsusep + this.endPointExportarFipSusepExport14C;
        url += this.service.getTokenZup();
        url += "&tipo=" + tipo;
        url += "&mes=" + mes;
        url += "&ano=" + ano;
        url += "&quadro=" + quadro;

        var contentType = tipo == 'PDF' ? 'application/pdf' : 'vnd.ms-excel';

        return this.http.post(url, objExport, { headers: this.headers, responseType: ResponseContentType.Blob })
            .map(
            (res) => {
                return new Blob([res.blob()], { type: contentType })
            })
    }
    
    # Controller Angular 2/4
    exportarPDF() {
      this.loadingBaixarPDF = true;
      this._contabilizacaoService.baixarQuadroFipSusep(this.retorno, 'PDF', this.nomeMes, this.ano, '14C').subscribe(res => {
        if (res) {
          saveAs(res, "Quadro 14C.pdf")
        }
        this.loadingBaixarPDF = false;
      }, (err) => {
        this.loadingBaixarPDF = false;
        console.log(err)
      });
    }


